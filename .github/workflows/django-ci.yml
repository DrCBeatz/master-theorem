# .github/workflows/django-ci.yml
name: Django CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      # Define environment variables for the build
      - name: Setup environment variables
        run: |
          echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=postgres" >> $GITHUB_ENV
          echo "POSTGRES_DB=test_db" >> $GITHUB_ENV
          echo "POSTGRES_HOST=db" >> $GITHUB_ENV
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> $GITHUB_ENV
          echo "DATABASE_URL=postgres://postgres:postgres@db:5432/test_db" >> $GITHUB_ENV

        # Start Docker containers using docker-compose
      - name: Build and start containers
        run: |
          docker-compose up -d --build

        # Run migrations. The `-T` option disables pseudo-TTY allocation, which is not supported on GitHub Actions.
      - name: Apply migrations
        run: docker-compose exec -T web python manage.py migrate

        # Run tests. Similarly, `-T` is used here.
      - name: Run tests
        run: docker-compose exec -T web pytest

        # Clean up Docker containers
      - name: Shutdown
        run: docker-compose down
